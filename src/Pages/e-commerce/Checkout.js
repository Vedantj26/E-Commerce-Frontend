import { MDBInput, MDBTypography } from "mdb-react-ui-kit";
import "../../CSS/Checkout.css";
import { MdDeleteForever } from "react-icons/md";
import { Button, Card, Col, Container, Form, Row } from "react-bootstrap";
import React, { useEffect, useState } from "react";
import NavScrollExample from "./NavBar";
import { useNavigate } from "react-router-dom";
import { useDispatch, useSelector } from "react-redux";
import {
  getAllCartItems,
  getCartItemsByUserId,
  getDeleteCartItemByProdId,
  getDeleteCartItemsByUserId,
  getPlaceOrder,
  sendMailWithAttachment,
} from "../../Services/Services";
import { updateCartList } from "../../Actions/auth.action";
import Swal from "sweetalert2";
import { Config } from "../../Config/config";
import Loader from "../../Components/Loader";

export default function Checkout() {
  const authState = useSelector((state) => state.auth.userInfo);
  const cartList = useSelector((state) => state.cart.cartList);
  const dispatch = useDispatch();
  const [userId, setuserId] = useState();
  const navigate = useNavigate();
  const [name, setname] = useState();
  const [email, setemail] = useState();
  const [mobile, setmobile] = useState();
  const [address, setaddress] = useState();
  const [counter, setcounter] = useState(0);
  const [loader, setLoader] = useState(false);

  useEffect(() => {
    setLoader(true);
    callGetAllProdAPI();
    callGetAllCartItemApi();
  }, [counter]);

  const callGetAllProdAPI = () => {
    let data = {
      userId: authState.id,
    };
    getCartItemsByUserId(data)
      .then((res) => {
        dispatch(updateCartList(res));
        setLoader(false);
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  const callGetAllCartItemApi = () => {
    getAllCartItems()
      .then((res) => {
        setuserId(res[0].userId);
        setLoader(false);
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  const callPlaceOrder = () => {
    let data = {
      name: name,
      email: email,
      mobile: mobile,
      address: address,
      totPrice: totalAmt(),
      orderItems: cartList,
      userId: authState.id,
    };
    setLoader(true);
    getPlaceOrder(data)
      .then((res) => {
        Swal.fire({
          position: "top-end",
          icon: "success",
          title: "Oreder Placed Successfully...!",
          showConfirmButton: false,
          timer: 1500,
        });
        callsendMailWithAttachment(res.data.data);
        callDeleteCartItemsByUserId(cartList[0].userId);
        navigate("/invoice", { state: { id: res.data.data.id } });
        setLoader(false);
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  const callsendMailWithAttachment = (ElementData) => {
    let data = {
      recipient: ElementData.email,
      emailSub: "Order Invoice",
      emailBody: "This is an Autogenerated mail.",
      emailAttach:
        "c:\\Users\\Vedant.Jadhav\\Downloads\\PurchaseInvoice" +
        ElementData.id +
        ".pdf",
    };
    setLoader(true);
    sendMailWithAttachment(data)
      .then((res) => {
        setLoader(false);
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  const totalAmt = () => {
    const sum = cartList.reduce(
      (total, element) => total + element.qty * element.price,
      0
    );
    return sum;
  };

  const callDeleteCartItemsByUserId = (userId) => {
    getDeleteCartItemsByUserId(userId)
      .then((res) => {
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  const callDeleteCartItemsByProdId = async (elementId) => {
    let data = {
      id: elementId,
    };
    getDeleteCartItemByProdId(data)
      .then((res) => {
        setcounter(counter + 1);
        Swal.fire({
          position: "top-end",
          icon: "success",
          title: "Product Deleted Successfully...!",
          showConfirmButton: false,
          timer: 1500,
        });
        return res;
      })
      .catch((err) => {
        throw err;
      });
  };

  return (
    <>
      <NavScrollExample />
      {loader ? (
        <Loader />
      ) : (
        <>
          <div className="d-flex justify-content-center align-items-center mt-3">
            <h1>Checkout Page</h1>
          </div>
          <section>
            <Container className="py-4 h-100">
              <Row className="justify-content-center align-items-center h-100">
                <Col>
                  {cartList && cartList.length > 0 ? (
                    <>
                      <Card
                        style={{
                          background: "hsla(0, 0%, 100%, 0.55)",
                          backdropFilter: "blur(30px)",
                        }}
                      >
                        <Card.Body className="p-4">
                          <Row>
                            <Col lg="7">
                              {cartList.map((element, index) => (
                                <Card key={index} className="mb-3">
                                  <Card.Body>
                                    <div className="d-flex justify-content-between">
                                      <div className="d-flex flex-row align-items-center">
                                        <div>
                                          <Card.Img
                                            src={
                                              Config.Image_BASE_URL +
                                              "" +
                                              element.imagePath
                                            }
                                            fluid
                                            className="rounded-3"
                                            style={{ width: "65px" }}
                                            alt="Shopping item"
                                          />
                                        </div>
                                        <div className="ms-3">
                                          <MDBTypography tag="h5">
                                            {element.name}
                                          </MDBTypography>
                                          <p className="small mb-0">
                                            {element.catName}
                                          </p>
                                        </div>
                                      </div>
                                      <div className="d-flex flex-row align-items-center">
                                        <div style={{ width: "50px" }}>
                                          <MDBTypography
                                            tag="h5"
                                            className="fw-normal mb-0"
                                          >
                                            {element.qty}
                                          </MDBTypography>
                                        </div>
                                        <div style={{ width: "80px" }}>
                                          <MDBTypography
                                            tag="h5"
                                            className="mb-0"
                                          >
                                            â‚¹ {element.price}
                                          </MDBTypography>
                                        </div>
                                        <a
                                          href="#!"
                                          style={{ color: "#cecece" }}
                                        >
                                          <MdDeleteForever
                                            size={28}
                                            color="black"
                                            onClick={() => {
                                              callDeleteCartItemsByProdId(
                                                element.id
                                              );
                                            }}
                                          />
                                        </a>
                                      </div>
                                    </div>
                                  </Card.Body>
                                </Card>
                              ))}
                            </Col>

                            <Col lg="5">
                              <Card className="bg-primary text-white rounded-3">
                                <Card.Body>
                                  <div className="d-flex justify-content-between align-items-center mb-4">
                                    <MDBTypography tag="h5" className="mb-0">
                                      Customer Details
                                    </MDBTypography>
                                    <Card.Img
                                      src={
                                        Config.Image_BASE_URL +
                                        "" +
                                        authState.photos
                                      }
                                      fluid
                                      className="rounded-3"
                                      style={{ width: "45px" }}
                                      alt="Avatar"
                                    />
                                  </div>

                                  <Form className="mt-4">
                                    <MDBInput
                                      className="mb-4"
                                      type="text"
                                      size="lg"
                                      placeholder="Enter Name"
                                      onChange={(e) => setname(e.target.value)}
                                      contrast
                                    />

                                    <Row className="mb-1">
                                      <Col md="6">
                                        <MDBInput
                                          className="mb-4"
                                          type="text"
                                          size="lg"
                                          placeholder="Enter Email"
                                          onChange={(e) =>
                                            setemail(e.target.value)
                                          }
                                          contrast
                                        />
                                      </Col>

                                      <Col md="6">
                                        <MDBInput
                                          className="mb-4"
                                          type="text"
                                          size="lg"
                                          placeholder="Mobile Number"
                                          onChange={(e) =>
                                            setmobile(e.target.value)
                                          }
                                          contrast
                                        />
                                      </Col>
                                    </Row>

                                    <MDBInput
                                      className="mb-4"
                                      type="text"
                                      size="lg"
                                      placeholder="Delivery Address"
                                      onChange={(e) =>
                                        setaddress(e.target.value)
                                      }
                                      contrast
                                    />
                                  </Form>

                                  <hr />

                                  <div className="d-flex justify-content-between">
                                    <p className="mb-2">Subtotal</p>
                                    <p className="mb-2">â‚¹ {totalAmt()}</p>
                                  </div>

                                  <div className="d-flex justify-content-between">
                                    <p className="mb-2">Total</p>
                                    <p className="mb-2">â‚¹ {totalAmt()}</p>
                                  </div>

                                  <center>
                                    <Button
                                      className="d-flex justify-content-between"
                                      style={{ width: "200" }}
                                      variant="success"
                                      block
                                      size="lg"
                                      onClick={() => {
                                        callPlaceOrder();
                                      }}
                                    >
                                      Order
                                    </Button>
                                  </center>
                                </Card.Body>
                              </Card>
                            </Col>
                          </Row>
                        </Card.Body>
                      </Card>
                    </>
                  ) : (
                    <p className="d-flex justify-content-center">
                      Data not found
                    </p>
                  )}
                </Col>
              </Row>
            </Container>
          </section>
        </>
      )}
    </>
  );
}
